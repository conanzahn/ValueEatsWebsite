# Generated by Django 3.2.4 on 2021-08-01 03:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_eatery', models.BooleanField(default=True)),
                ('postcode', models.CharField(blank=True, max_length=4, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucher_code', models.CharField(max_length=50, verbose_name='voucher_code')),
                ('restaurant_name', models.CharField(max_length=50, verbose_name='restaurant_name')),
                ('discount', models.FloatField(verbose_name='discount')),
                ('start_time', models.CharField(max_length=50, verbose_name='start_time')),
                ('start_date', models.CharField(max_length=50, verbose_name='start_date')),
                ('end_time', models.CharField(max_length=50, verbose_name='end_time')),
                ('week_day', models.CharField(max_length=50, verbose_name='week_day')),
                ('repeat_type', models.CharField(max_length=50, verbose_name='repeat_type')),
                ('amount', models.IntegerField(default=1, verbose_name='amount')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('tag', models.CharField(default='1', max_length=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'voucher',
                'verbose_name_plural': 'voucher',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('tag', models.CharField(default='1', max_length=1)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriber', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscription',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=100)),
                ('cuisines_offered', models.CharField(blank=True, choices=[('Burgers', 'Burgers'), ('Fast Food', 'Fast Food'), ('Chicken', 'Chicken'), ('Pizza', 'Pizza'), ('Asian', 'Asian'), ('BBQ', 'BBQ'), ('Cafe', 'Cafe'), ('Vegan', 'Vegan'), ('Others', 'Others')], max_length=50, null=True, verbose_name='cuisines_offered')),
                ('menu', models.CharField(max_length=100, verbose_name='menu')),
                ('profile', models.CharField(max_length=100, verbose_name='profile')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('tag', models.CharField(default='1', max_length=1)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'restaurant',
                'verbose_name_plural': 'restaurant',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=500)),
                ('food', models.FloatField()),
                ('service', models.FloatField()),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('tag', models.CharField(default='1', max_length=1)),
                ('diner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_comment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comment',
            },
        ),
        migrations.CreateModel(
            name='BookVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verify_code', models.CharField(max_length=50, verbose_name='verify_code')),
                ('reservation_name', models.CharField(max_length=50, verbose_name='reservation_name')),
                ('email', models.CharField(max_length=50, verbose_name='email')),
                ('phone', models.IntegerField(verbose_name='phone')),
                ('person_num', models.IntegerField(verbose_name='person_num')),
                ('requirements', models.CharField(blank=True, max_length=500, null=True, verbose_name='requirements')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='create_time')),
                ('tag', models.CharField(default='1', max_length=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='BookVoucher', to='repository.voucher', verbose_name='voucher')),
            ],
            options={
                'verbose_name': 'bookVoucher',
                'verbose_name_plural': 'bookVoucher',
            },
        ),
    ]
